/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MyDateInterface extends ethers.utils.Interface {
  functions: {
    "getDay(uint256)": FunctionFragment;
    "getDaysInMonth(uint8,uint16)": FunctionFragment;
    "getMonth(uint256)": FunctionFragment;
    "getYear(uint256)": FunctionFragment;
    "isLeapYear(uint16)": FunctionFragment;
    "leapYearsBefore(uint256)": FunctionFragment;
    "toTimestamp(uint16,uint8,uint8,uint8,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDaysInMonth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMonth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLeapYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leapYearsBefore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toTimestamp",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getDay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDaysInMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMonth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLeapYear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leapYearsBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toTimestamp",
    data: BytesLike
  ): Result;

  events: {};
}

export class MyDate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MyDateInterface;

  functions: {
    getDay(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDaysInMonth(
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMonth(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getYear(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isLeapYear(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    leapYearsBefore(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    "toTimestamp(uint16,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    "toTimestamp(uint16,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;
  };

  getDay(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getDaysInMonth(
    month: BigNumberish,
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getMonth(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getYear(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  isLeapYear(year: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  leapYearsBefore(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
    year: BigNumberish,
    month: BigNumberish,
    day: BigNumberish,
    hour: BigNumberish,
    minute: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toTimestamp(uint16,uint8,uint8,uint8)"(
    year: BigNumberish,
    month: BigNumberish,
    day: BigNumberish,
    hour: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toTimestamp(uint16,uint8,uint8)"(
    year: BigNumberish,
    month: BigNumberish,
    day: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
    year: BigNumberish,
    month: BigNumberish,
    day: BigNumberish,
    hour: BigNumberish,
    minute: BigNumberish,
    second: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getDay(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

    getDaysInMonth(
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getMonth(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getYear(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    isLeapYear(year: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    leapYearsBefore(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getDay(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDaysInMonth(
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMonth(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYear(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLeapYear(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leapYearsBefore(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDay(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDaysInMonth(
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMonth(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYear(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLeapYear(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leapYearsBefore(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toTimestamp(uint16,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toTimestamp(uint16,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
